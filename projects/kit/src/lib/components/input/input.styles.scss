@use 'sass:map';
@use 'sass:string';

@use 'mixins' as *;
@use 'functions' as *;
@use 'variables' as *;

:host {
  box-sizing: border-box;
  position: relative;
  width: 100%;
  @include flex-container(row, center, flex-start);
}

.input {
  z-index: 2;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  outline: none;
  width: 100%;
  padding: 2rem 2rem 2rem 3rem;
  border-radius: $controlBorderRadius;
  box-sizing: border-box;
  border: none;
  color: map.get($input_light_styles, input, color);
  caret-color: map.get($input_light_styles, input, caret-color);
  background-color: map.get($input_light_styles, input, background-color);

  transition: color variable(transition-duration_shorter) variable(transition-timing-function_common),
    background-color variable(transition-duration_shorter) variable(transition-timing-function_common);

  &:-webkit-autofill {
    -webkit-text-fill-color: map.get($input_light_styles, input, color);
    box-shadow: none;
    -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, input, background-color) inset;
  }

  &.on-hover::placeholder {
    opacity: 0;
  }

  &::placeholder {
    opacity: 1;
    will-change: opacity;
    transition: opacity variable(transition-duration_shorter) variable(transition-timing-function_common),
      opacity variable(transition-duration_shorter) variable(transition-timing-function_common);
    color: map.get($input_light_styles, input, placeholder, color);
  }

  &__icons-list {
    z-index: 3;
    position: absolute;
    overflow: hidden;
    top: 1px;
    bottom: 1px;
    right: 0;
    box-sizing: border-box;
    height: calc(100% - 2px);
    @include flex-container(row, center);
    width: fit-content;
    background-color: transparent;
    gap: 1px;

    &:not(:empty).large {
      @include font-preset-h3();
      right: 3rem;
    }

    &:not(:empty).medium {
      @include font-preset-caption-xs();
      right: 2rem;
    }

    &:not(:empty).small {
      @include font-preset-caption-xs();
      right: 1rem;
    }
  }

  &__icon {
    position: relative;
    opacity: 0;
    will-change: opacity;

    &:focus,
    &:active,
    &:hover,
    &-invalid,
    &-phone-locale,
    &-calendar {
      opacity: 1;
    }

    &-invalid {
      --button-icon_color: #{semantic-color(kind-danger-normal)};
    }
  }

  &_filled ~ .input__icons-list {
    .input__icon-reset,
    .input__icon-password {
      opacity: 1;
    }
  }

  &_large {
    height: 10rem;
    @include font-preset-h3();

    &::placeholder {
      @include font-type-regular();
    }
  }

  &_medium {
    height: 8rem;
    line-height: 4rem;
    @include font-preset-caption-xs();
  }

  &_small {
    height: 6rem;
    @include font-preset-caption-xs();
  }

  &:hover:not(:focus):not([disabled]) {
    background-color: map.get($input_light_styles, hover, background-color);

    &:-webkit-autofill {
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, hover, background-color) inset;
    }
  }

  &:active:not(:focus):not([disabled]) {
    background-color: map.get($input_light_styles, active, background-color);

    &:-webkit-autofill {
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, active, background-color) inset;
    }

    &::placeholder {
      opacity: 1;
    }
  }

  &:focus:not([disabled]) {
    cursor: text;

    & ~ .input__icons-list {
      .input__icon-password {
        opacity: 1;
      }
    }

    &::placeholder {
      opacity: 1;
      color: map.get($input_light_styles, focus, placeholder, color);
    }

    background-color: map.get($input_light_styles, focus, background-color);

    &:-webkit-autofill {
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, focus, background-color) inset;
    }
  }

  &_invalid {
    border: 1px solid map.get($input_light_styles, invalid, border-color);

    &:-webkit-autofill {
      border: 1px solid map.get($input_light_styles, invalid, border-color);
    }
  }

  &[disabled] {
    cursor: not-allowed;
    color: map.get($input_light_styles, disabled, color);
    background-color: map.get($input_light_styles, disabled, background-color);

    &:-webkit-autofill {
      -webkit-text-fill-color: map.get($input_light_styles, disabled, color);
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, disabled, background-color) inset;
    }

    &::selection {
      background: transparent;
    }

    &::placeholder {
      opacity: 1;
      color: map.get($input_light_styles, disabled, placeholder, color);
    }

    ~ .input__icons-list {
      display: none;
    }
  }

  &[class*='ghost'] {
    background-color: unset;
  }

  &[class*='bold'] {
    @include font-type-bold;

    &::placeholder {
      @include font-type-bold;
    }
  }

  @include host-selector-dark-theme() {
    color: map.get($input_dark_styles, input, color);
    caret-color: map.get($input_dark_styles, input, caret-color);
    background-color: map.get($input_dark_styles, input, background-color);
    &:-webkit-autofill {
      -webkit-text-fill-color: map.get($input_dark_styles, input, color);
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, input, background-color) inset;
    }
    &::placeholder {
      color: map.get($input_dark_styles, input, placeholder, color);
    }
    &:hover:not(:focus):not([disabled]) {
      background-color: map.get($input_dark_styles, hover, background-color);

      &:-webkit-autofill {
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, hover, background-color) inset;
      }
    }
    &:active:not(:focus):not([disabled]) {
      color: map.get($input_dark_styles, active, color);
    }
    &:focus {
      background-color: map.get($input_dark_styles, focus, background-color);

      &::placeholder {
        color: map.get($input_dark_styles, focus, placeholder, color);
      }

      &:-webkit-autofill {
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, focus, background-color) inset;
      }
    }

    &_invalid {
      border: 1px solid map.get($input_dark_styles, invalid, border-color);

      &:-webkit-autofill {
        border: 1px solid map.get($input_dark_styles, invalid, border-color);
      }
    }
    &[disabled] {
      color: map.get($input_dark_styles, disabled, color);
      background-color: map.get($input_dark_styles, disabled, background-color);

      &:-webkit-autofill {
        -webkit-text-fill-color: map.get($input_dark_styles, disabled, color);
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, disabled, background-color) inset;
      }

      &::placeholder {
        color: map.get($input_dark_styles, disabled, placeholder, color);
      }
    }

    &[class*='ghost'] {
      background-color: unset;
    }

    &[class*='bold'] {
      @include font-type-bold;

      &::placeholder {
        @include font-type-bold;
      }
    }
  }
}

// to show icons or placeholder - used their host-hover
:host:hover {
  .input__icons-list .input__icon:not(.input__icon-password) {
    opacity: 1;
  }

  .input:not(:focus):not([disabled]) {
    &::placeholder {
      opacity: 1;
      color: color(neutral-1000);

      @include host-selector-dark-theme() {
        color: color(neutral-1);
      }
    }
  }
}
