@use 'mixins' as *;
@use 'functions' as *;
@use 'variables' as *;

:host {
  box-sizing: border-box;
  position: relative;
  width: 100%;
}

.trigger {
  @include flex-container(row, center, space-between);
  @include font-preset-caption-xs();

  box-sizing: border-box;
  cursor: pointer;
  width: 100%;
  padding-right: 14px;

  border-radius: $controlBorderRadius;
  border: 1px solid semantic-color(lines-opacity);

  color: semantic-color(text-primary);
  background-color: semantic-color(surface-primary);

  transition: color variable(transition-duration_shorter) variable(transition-timing-function_common),
    background-color variable(transition-duration_shorter) variable(transition-timing-function_common);

  &.large {
    height: 10rem;
    padding: 9px 3rem;

    ~ .icons .icons__icon {
      @extend .icons__icon_large;
    }
  }

  &.medium {
    height: 8rem;
    padding: 5px 3rem;

    ~ .icons .icons__icon {
      @extend .icons__icon_medium;
    }
  }

  &:not(.trigger_disabled) {
    @include hover() {
      border-color: semantic-color(kind-primary-normal);

      &:not(.trigger_active) {
        background-color: semantic-color(surface-tertiary);
      }
    }

    &.trigger_invalid {
      border-color: semantic-color(kind-danger-normal);
    }
  }

  &_active {
    background-color: semantic-color(surface-primary);
    border-color: semantic-color(kind-primary-normal);
  }

  &_active ~ .icons {
    .icons__icon-reset {
      opacity: 1;
    }
  }

  &_disabled {
    background-color: semantic-color(kind-neutral-disabled);
    color: semantic-color(text-disabled);
    cursor: not-allowed;

    .trigger__rotate-icon {
      color: semantic-color(icons-disabled);
    }

    .placeholder {
      color: semantic-color(text-disabled);
    }
  }

  &_inline {
    &:not(.trigger_invalid):not(.trigger_active):not(:hover) {
      border-color: transparent;
    }

    &:not(.trigger_disabled) {
      @include hover() {
        &:not(.trigger_active) {
          background-color: semantic-color(kind-opacity-hover);
        }
      }
    }

    &.trigger_disabled {
      border-color: transparent;
      background-color: transparent;
    }
  }

  &__text {
    @include flex-container(row, center, flex-start);
    @include ellipsis-text-overflow;

    flex: 1;
    height: 100%;
  }

  &__rotate-icon {
    @include flex-container(column, center, center);

    color: semantic-color(icons-secondary);
    font-size: 4rem;
    margin-left: 1rem;
    transition: transform variable(transition-duration_shorter) variable(transition-timing-function_common);
    transform-origin: center;

    &.expanded {
      transform: rotate(180deg);
    }
  }
}

.placeholder {
  color: semantic-color(text-primary);
  width: 100%;
  text-align: left;
  align-self: center;
}

.icons {
  @include flex-container(row, center);

  z-index: 3;
  position: absolute;
  overflow: hidden;
  top: 1px;
  bottom: 1px;
  right: 9rem;
  box-sizing: border-box;
  height: calc(100% - 2px);
  width: fit-content;
  background-color: transparent;
  gap: 1.5rem;

  &__icon {
    padding: 1rem;
    margin: -1rem;
    cursor: pointer;
    pointer-events: all;
    color: semantic-color(icons-secondary);

    &_large {
      font-size: 4.5rem;
    }

    &_medium {
      font-size: 4rem;
    }

    &-invalid {
      color: semantic-color(kind-danger-normal);
    }

    &-reset {
      &:hover {
        color: semantic-color(kind-primary-hover);
      }
    }
  }
}
