import { VisualizationColorsConfig } from '../src/declarations/interfaces/visualization-colors-config.interface';
import { readFile, writeFile } from 'fs/promises';

async function writeContentToFile(path: string, fileData: string): Promise<void> {
  await writeFile(path, fileData);
}
async function getVisualizationColorsFileContents(): Promise<[string, string]> {
  const indexColorsConfigFile: Promise<string> = readFile('src/assets/configs/index-colors-config.json', {
    encoding: 'utf8',
  });
  const visualizationColorsConfigFile: Promise<string> = readFile(
    'src/assets/configs/visualization-colors-config.json',
    { encoding: 'utf8' }
  );

  return await Promise.all([indexColorsConfigFile, visualizationColorsConfigFile])
    .then(([indexColorsConfig, visualizationColorsConfig]: [string, string]) => [
      JSON.parse(indexColorsConfig),
      JSON.parse(visualizationColorsConfig),
    ])
    .then(
      ([indexGroup, visualizationGroup]: [VisualizationColorsConfig.Group[], VisualizationColorsConfig.Group[]]) => {
        const emptyConstFileContent: string[] = [
          '// Automatically generated by create-visualization-colors-const.script.ts.',
          '// Edit index-colors-config.json and visualization-colors-config.json',
          '',
          "import { VisualizationColors } from '../interfaces/visualization-colors.interface';",
        ];

        const emptyInterfaceFileContent: string[] = [
          '// Automatically generated by create-visualization-colors-const.script.ts.',
          '// Edit index-colors-config.json and visualization-colors-config.json',
          '',
          'export interface VisualizationColors {',
          '  INDEX: IndexColorsGroup;',
          '  VISUALIZATION: VisualizationColorsGroup;',
          '}',
          '',
          "type Alpha = '50' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | '950';",
          '',
          'type ColorPermutations<T extends IndexColor | VisualizationColor> = {',
          '  [C in `${T}_${Alpha}`]: Colors;',
          '};',
          '',
          'type IndexColorsGroup = ColorPermutations<IndexColor>;',
          'type VisualizationColorsGroup = ColorPermutations<VisualizationColor>;',
          '',
          'interface Colors {',
          '  LIGHT: string;',
          '  DARK: string;',
          '}',
        ];

        const constResult: string[] = [];
        const interfaceResult: string[] = [];

        constResult.push('export const VISUALIZATION_COLORS: VisualizationColors = {');

        constResult.push(...getVisualizationColorsGroupContent(indexGroup, 'INDEX'));
        constResult.push(...getVisualizationColorsGroupContent(visualizationGroup, 'VISUALIZATION'));

        constResult.push('};');

        interfaceResult.push(...getVisualizationColorsEnumContent(indexGroup, 'IndexColor'));
        interfaceResult.push(...getVisualizationColorsEnumContent(visualizationGroup, 'VisualizationColor'));

        return [
          `${emptyConstFileContent.join('\n')}\n\n${constResult.join('\n')}\n`,
          `${emptyInterfaceFileContent.join('\n')}\n\n${interfaceResult.join('\n')}`,
        ];
      }
    );
}

function getVisualizationColorsGroupContent(
  colorGroup: VisualizationColorsConfig.Group[],
  colorGroupName: string
): string[] {
  const colorsGroupContent: string[] = [];

  colorsGroupContent.push(`  ${colorGroupName}: {`);

  for (const group of colorGroup) {
    for (const configuration of group.configurations) {
      colorsGroupContent.push(`    ${group.name.replace(' ', '_').toUpperCase()}_${configuration.name}: {`);
      colorsGroupContent.push(`      LIGHT: '#${configuration.lightColor}',`);
      colorsGroupContent.push(`      DARK: '#${configuration.darkColor}',`);
      colorsGroupContent.push('    },');
    }
  }

  colorsGroupContent.push('  },');

  return colorsGroupContent;
}

function getVisualizationColorsEnumContent(
  colorGroup: VisualizationColorsConfig.Group[],
  colorGroupName: string
): string[] {
  const colorsTypesContent: string[] = [];

  colorsTypesContent.push(`enum ${colorGroupName} {`);

  for (const group of colorGroup) {
    const camelCaseGroupName: string = group.name
      .replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => (index === 0 ? word.toLowerCase() : word.toUpperCase()))
      .replace(/\s+/g, '');
    const upperCaseGroupName: string = group.name.replace(' ', '_').toUpperCase();

    colorsTypesContent.push(`  ${camelCaseGroupName} = '${upperCaseGroupName}',`);
  }

  colorsTypesContent.push('}');
  colorsTypesContent.push('');
  return colorsTypesContent;
}

Promise.resolve()
  .then(() => getVisualizationColorsFileContents())
  .then(([constfileData, interfacefileData]: [string, string]) => {
    writeContentToFile('src/declarations/constants/visualization-colors.const.ts', constfileData);
    writeContentToFile('src/declarations/interfaces/visualization-colors.interface.ts', interfacefileData);
  });
