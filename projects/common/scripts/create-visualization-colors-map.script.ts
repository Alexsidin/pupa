import { VisualizationColor } from '../src/declarations/classes/visualization-color.class';
import { VisualizationColorsConfig } from '../src/declarations/interfaces/visualization-colors-config.interface';
import { readFile, writeFile } from 'fs/promises';

async function writeContentToFile(fileData: string): Promise<void> {
  await writeFile('src/styles/maps/visualization-colors.map.scss', fileData);
}

async function getVisualizationColorsMapScssFileContent(): Promise<string> {
  const indexColorsConfigFile: Promise<string> = readFile('src/assets/configs/index-colors-config.json', {
    encoding: 'utf8',
  });
  const visualizationColorsConfigFile: Promise<string> = readFile(
    'src/assets/configs/visualization-colors-config.json',
    { encoding: 'utf8' }
  );

  return await Promise.all([indexColorsConfigFile, visualizationColorsConfigFile])
    .then(([indexColorsConfig, visualizationColorsConfig]: [string, string]) => [
      JSON.parse(indexColorsConfig),
      JSON.parse(visualizationColorsConfig),
    ])
    .then(
      ([indexGroup, visualizationGroup]: [VisualizationColorsConfig.Group[], VisualizationColorsConfig.Group[]]) => {
        const lightColors: string[] = [];
        const darkColors: string[] = [];

        for (const group of indexGroup) {
          for (const configuration of group.configurations) {
            const visualizationColor: VisualizationColor = new VisualizationColor(configuration, group.name, 'index');

            lightColors.push(`'${visualizationColor.lightColor.name}': #${visualizationColor.lightColor.value}`);
            darkColors.push(`'${visualizationColor.darkColor.name}': #${visualizationColor.darkColor.value}`);
          }
        }

        for (const group of visualizationGroup) {
          for (const configuration of group.configurations) {
            const visualizationColor: VisualizationColor = new VisualizationColor(
              configuration,
              group.name,
              'visualization'
            );

            lightColors.push(`'${visualizationColor.lightColor.name}': #${visualizationColor.lightColor.value}`);
            darkColors.push(`'${visualizationColor.darkColor.name}': #${visualizationColor.darkColor.value}`);
          }
        }

        const emptyFileContent: string =
          '/** @file Automatically generated by create-visualization-colors-map.script.ts. Edit index-colors-config.json and visualization-colors-config.json */';

        return `${emptyFileContent}\n
$visualizationColorsMap: (\n  ${[...lightColors, ...darkColors].join(',\n  ')},\n);\n`;
      }
    );
}

Promise.resolve()
  .then(() => getVisualizationColorsMapScssFileContent())
  .then((fileData: string) => writeContentToFile(fileData));
