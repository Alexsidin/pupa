@use 'mixins';
@use 'functions';
@use 'variables';

:host {
  box-sizing: border-box;
  position: relative;
  width: 100%;
}

.pupa-trigger {
  @include mixins.flex-container(row, center, space-between);
  @include mixins.font-preset-caption-xs();

  box-sizing: border-box;
  cursor: pointer;
  width: 100%;
  padding-right: 3.5rem;

  border-radius: variables.$controlBorderRadius;
  border: 1px solid functions.semantic-color(lines-opacity);

  color: functions.semantic-color(text-primary);
  background-color: functions.semantic-color(surface-primary);

  transition: color functions.variable(transition-duration_shorter)
      functions.variable(transition-timing-function_common),
    background-color functions.variable(transition-duration_shorter)
      functions.variable(transition-timing-function_common);

  &.large {
    height: 10rem;
    padding: 2.25rem 3rem;

    ~ .pupa-icons .pupa-icons__icon {
      @extend .pupa-icons__icon_large;
    }
  }

  &.medium {
    height: 8rem;
    padding: 1.25rem 2rem;

    ~ .pupa-icons .pupa-icons__icon {
      @extend .pupa-icons__icon_medium;
    }
  }

  &:not(.pupa-trigger_disabled) {
    @include mixins.hover() {
      border-color: functions.semantic-color(kind-primary-normal);

      &:not(.pupa-trigger_active) {
        background-color: functions.semantic-color(surface-tertiary);
      }
    }

    &.pupa-trigger_invalid {
      border-color: functions.semantic-color(kind-danger-normal);
    }
  }

  &_active {
    background-color: functions.semantic-color(surface-primary);
    border-color: functions.semantic-color(kind-primary-normal);
  }

  &_active ~ .pupa-icons {
    .pupa-icons__icon-reset {
      opacity: 1;
    }
  }

  &_disabled {
    background-color: functions.semantic-color(kind-neutral-disabled);
    color: functions.semantic-color(text-disabled);
    cursor: not-allowed;

    .pupa-trigger__rotate-icon {
      color: functions.semantic-color(icons-disabled);
    }

    .pupa-placeholder {
      color: functions.semantic-color(text-disabled);
    }
  }

  &_inline {
    &:not(.pupa-trigger_invalid):not(.pupa-trigger_active):not(:hover) {
      border-color: transparent;
    }

    &:not(.pupa-trigger_disabled) {
      @include mixins.hover() {
        &:not(.pupa-trigger_active) {
          background-color: functions.semantic-color(kind-opacity-hover);
        }
      }
    }

    &.pupa-trigger_disabled {
      border-color: transparent;
      background-color: transparent;
    }
  }

  &__text {
    @include mixins.flex-container(row, center, flex-start);
    @include mixins.ellipsis-text-overflow;

    flex: 1;
    height: 100%;
  }

  &__rotate-icon {
    @include mixins.flex-container(column, center, center);

    color: functions.semantic-color(icons-secondary);
    font-size: 4rem;
    margin-left: 1rem;
    transition: transform functions.variable(transition-duration_shorter)
      functions.variable(transition-timing-function_common);
    transform-origin: center;

    &.pupa-expanded {
      transform: rotate(180deg);
    }
  }
}

.pupa-placeholder {
  color: functions.semantic-color(text-secondary);
  width: 100%;
  text-align: left;
  align-self: center;
}

.pupa-icons {
  @include mixins.flex-container(row, center);

  z-index: 3;
  position: absolute;
  overflow: hidden;
  top: 0.25rem;
  bottom: 0.25rem;
  right: 9rem;
  box-sizing: border-box;
  height: calc(100% - 0.5rem);
  width: fit-content;
  background-color: transparent;
  gap: 1.5rem;

  &__icon {
    padding: 1rem;
    margin: -1rem;
    cursor: pointer;
    pointer-events: all;
    color: functions.semantic-color(icons-secondary);

    &_large {
      font-size: 4.5rem;
    }

    &_medium {
      font-size: 4rem;
    }

    &-invalid {
      color: functions.semantic-color(kind-danger-normal);
    }

    &-reset {
      &:hover {
        color: functions.semantic-color(kind-primary-hover);
      }
    }
  }
}
