@use 'mixins';
@use 'functions';
@use 'variables';

@mixin pupa-textarea-fonts {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  font-weight: inherit;
}

:host {
  display: block;
  width: 100%;
}

.pupa-textarea {
  border: 1px solid transparent;
  border-radius: variables.$controlBorderRadius;
  transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;

  @include mixins.flex-container(row, start, start);
  @include mixins.font-preset-caption-xs();

  &.large {
    padding: 2rem 1rem;
  }

  &.medium {
    padding: 1rem;
  }

  &.large {
    .pupa-textarea__pseudo-content,
    .pupa-textarea__control {
      min-height: 10rem;
    }
  }

  &.medium {
    .pupa-textarea__pseudo-content,
    .pupa-textarea__control {
      min-height: 8rem;
    }
  }

  &__scrollable {
    @include pupa-textarea-fonts;
    width: 100%;
  }

  &__wrapper {
    @include pupa-textarea-fonts;

    position: relative;
    display: grid;
    width: 100%;
    height: max-content;
    overflow: hidden;
  }

  &__pseudo-content {
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    font-weight: inherit;

    position: relative;
    width: 100%;
    border: none;
    overflow: hidden;
    color: transparent;

    white-space: pre-wrap;
    word-wrap: break-word;
    pointer-events: none;

    box-sizing: border-box;
  }

  &__control {
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    font-weight: inherit;

    appearance: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    outline: none;
    border: none;
    resize: none;
    overflow: hidden;
    background-color: transparent;

    white-space: pre-wrap;
    word-wrap: break-word;

    box-sizing: border-box;

    &::placeholder {
      transition: color 0.2s ease, opacity 0.2s ease;
    }
  }

  &_disabled {
    cursor: not-allowed;
    user-select: none;

    .pupa-textarea__control {
      cursor: not-allowed;
    }

    .pupa-textarea__control::selection {
      background: transparent;
    }
  }
}

.pupa-textarea__pseudo-content,
.pupa-textarea__control {
  padding: 1rem;
}

// container colors
.pupa-textarea {
  color: functions.semantic-color(text-primary);
  background-color: functions.semantic-color(surface-primary);
  border-color: functions.semantic-color(lines-opacity);
}

// control colors
.pupa-textarea__control {
  color: functions.semantic-color(text-primary);
}

// control placeholder
.pupa-textarea__control::placeholder {
  color: functions.semantic-color(text-secondary);
}

.pupa-textarea:not(.pupa-textarea_disabled) {
  @include mixins.hover() {
    background-color: functions.semantic-color(surface-tertiary);
    border-color: functions.semantic-color(kind-primary-normal);

    .pupa-textarea__control::placeholder {
      color: functions.semantic-color(text-primary);
    }
  }

  &:focus-within {
    background-color: functions.semantic-color(surface-primary);
    border-color: functions.semantic-color(kind-primary-normal);

    .pupa-textarea__control::placeholder {
      color: functions.semantic-color(text-primary);
    }
  }

  &.pupa-textarea_invalid {
    border-color: functions.semantic-color(kind-danger-normal);
  }
}

.pupa-textarea_disabled {
  color: functions.semantic-color(text-disabled);
  background-color: functions.semantic-color(kind-neutral-disabled);

  .pupa-textarea__control {
    color: functions.semantic-color(text-disabled);

    &::placeholder {
      color: functions.semantic-color(text-disabled);
    }
  }
}

.pupa-counter {
  display: block;
  text-align: right;
  width: 100%;
  margin-top: 0.5rem;
  @include mixins.font-size-xxs();
  color: functions.semantic-color(text-secondary);

  &_invalid {
    color: functions.semantic-color(kind-danger-normal);
  }
}

.pupa-error-icon {
  cursor: pointer;
  pointer-events: all;
  color: functions.semantic-color(kind-danger-normal);
}
