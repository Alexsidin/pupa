@use 'sass:string';

@use 'mixins' as *;
@use 'functions' as *;
@use 'variables' as *;

:host {
  box-sizing: border-box;
  position: relative;
  width: 100%;
  @include flex-container(row, center, flex-start);
}

.input-wrapper {
  background-color: semantic-color(surface-primary);
  border: 1px solid semantic-color(lines-opacity);
  border-radius: $controlBorderRadius;
  box-sizing: border-box;
  @include flex-container(row, center, flex-start);
  gap: 1rem;
  height: fit-content;
  overflow: hidden;
  padding: 0 0.75rem;
  transition: background-color variable(transition-duration_shorter) variable(transition-timing-function_common),
    border-color variable(transition-duration_shorter) variable(transition-timing-function_common);
  width: 100%;
  cursor: pointer;

  .input {
    background-color: transparent;
    border: none;
    color: inherit;
    padding: 0;
    margin-left: 1rem;
    transition: color variable(transition-duration_shorter) variable(transition-timing-function_common);
  }

  &:hover:not(.input-wrapper_disabled) {
    background-color: semantic-color(surface-tertiary);
  }

  &:focus-within,
  &:hover {
    &:not(.input-wrapper_disabled) {
      &:not(.input-wrapper_invalid) {
        border-color: semantic-color(kind-primary-normal);
      }

      .input::placeholder {
        color: semantic-color(text-primary);
      }
    }
  }

  &_large {
    @extend .input_large;
  }

  &_medium {
    @extend .input_medium;
  }

  &_invalid {
    border-color: semantic-color(kind-danger-normal);
  }

  &_disabled {
    cursor: not-allowed;
    color: semantic-color(text-disabled);
    background-color: semantic-color(kind-neutral-disabled);

    .input {
      pointer-events: none;

      &::selection {
        background: transparent;
        color: semantic-color(text-disabled);
      }

      &::placeholder {
        color: semantic-color(text-disabled);
      }
    }
  }

  &[class*='inline'] {
    &:not(:hover):not(:focus-within):not(.input-wrapper_invalid) {
      border-color: transparent;
    }

    &:hover:not(.input-wrapper_disabled) {
      background-color: semantic-color(kind-opacity-hover);
    }

    &.input-wrapper_disabled {
      border-color: transparent;
      background-color: transparent;
    }
  }

  &[class*='bold'] .input {
    @include font-type-bold;

    &::placeholder {
      @include font-type-bold;
    }
  }

  .input-icon {
    &_invalid {
      color: semantic-color(kind-danger-normal);
    }
  }

  .input-control {
    @include flex-container(row, center);
    flex: 1;
  }

  .input-default-actions {
    @include flex-container(row, center);
  }

  .input-actions-separator {
    height: 4rem;
    width: 1px;
    border-radius: 2.5rem;
    background-color: semantic-color(lines-opacity);
  }
}

.input {
  background-color: semantic-color(surface-primary);
  border: 1px solid semantic-color(lines-opacity);
  box-sizing: border-box;
  caret-color: semantic-color(text-primary);
  color: semantic-color(text-primary);
  cursor: pointer;
  height: 100%;
  overflow: hidden;
  outline: none;
  padding: 0 2rem;
  transition: background-color variable(transition-duration_shorter) variable(transition-timing-function_common),
    border-color variable(transition-duration_shorter) variable(transition-timing-function_common),
    color variable(transition-duration_shorter) variable(transition-timing-function_common);
  width: 100%;
  @include font-preset-caption-xs();

  &:-webkit-autofill {
    -webkit-text-fill-color: semantic-color(text-primary);
  }

  &::placeholder {
    will-change: opacity;
    transition: opacity variable(transition-duration_shorter) variable(transition-timing-function_common);
    color: semantic-color(text-secondary);
    @include font-preset-caption-xs();
  }

  &:focus:not(.input_disabled) {
    cursor: text;
  }

  &:focus,
  &:hover {
    &:not(.input_disabled) {
      &:not(.input_invalid) {
        border-color: semantic-color(kind-primary-normal);
      }

      &::placeholder {
        color: semantic-color(text-primary);
      }
    }
  }

  &_large {
    height: 10rem;
  }

  &_medium {
    height: 8rem;
  }

  &_invalid {
    border-color: semantic-color(kind-danger-normal);
  }

  &_disabled {
    cursor: not-allowed;
    color: semantic-color(text-disabled);
    background-color: semantic-color(kind-neutral-disabled);

    &::selection {
      background: transparent;
    }

    &::placeholder {
      color: semantic-color(text-disabled);
    }

    &:-webkit-autofill {
      -webkit-text-fill-color: semantic-color(text-disabled);
    }
  }

  &[class*='inline'] {
    &:not(:hover):not(:focus):not(.input_invalid) {
      border-color: transparent;
    }

    &:hover:not(.input_disabled) {
      background-color: semantic-color(kind-opacity-hover);
    }

    &.input_disabled {
      background-color: transparent;
    }
  }

  &[class*='bold'] {
    @include font-type-bold;

    &::placeholder {
      @include font-type-bold;
    }
  }
}
