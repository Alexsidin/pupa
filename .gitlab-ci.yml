variables:
  NPM_AUTH_TOKEN: ${CI_JOB_TOKEN}
  GIT_COMMIT_HASH: ${CI_COMMIT_SHORT_SHA}
  PIPELINE_ID: ${CI_PIPELINE_IID}
  DEPLOY_IMAGE: dockerhub.bimeister.io/bimeister/pupakit:${CI_COMMIT_SHORT_SHA}
  BUILD_EFFECTIVE_YML_FILE: docker-compose.yml

default:
  tags:
    - docker-executor
  image:
    name: dockerhub.bimeister.io/proxy_cache/library/node:16-slim
    entrypoint: ['']

stages:
  - preinstall
  - build
  - check
  - deploy (demo)
  - deploy (NPM)

Dependencies:
  stage: preinstall
  needs: []
  interruptible: true
  allow_failure: false
  script:
    - npm ci
  cache:
    key: dependencies
    paths:
      - node_modules/
  artifacts:
    paths:
      - ./node_modules/

Static Files (kit):
  stage: build
  needs: ['Dependencies']
  dependencies:
    - 'Dependencies'
  interruptible: true
  allow_failure: false
  script:
    - npm run build:kit
  artifacts:
    paths:
      - ./node_modules/
      - ./dist/

Static Files (demo):
  stage: build
  needs: ['Dependencies']
  dependencies:
    - 'Dependencies'
  interruptible: true
  allow_failure: false
  script:
    - npm run build:demo-ci
  artifacts:
    paths:
      - ./node_modules/
      - ./dist/

Lint:
  stage: check
  needs: ['Dependencies']
  interruptible: true
  allow_failure: false
  script:
    - npm run lint

Spell Check:
  stage: check
  needs: ['Dependencies']
  interruptible: true
  allow_failure: false
  script:
    - npm run cspell:check

# Test:
#   stage: check
#   needs: ['Dependencies'] # Необходимо подготовить Image со всеми зависимостями.
#   interruptible: true # Поддержка будет возвращена в сл. MR
#   allow_failure: false
#   script:
#     - npm run test:ci
#   artifacts:
#     name: 'code-coverage'
#     when: always
#     reports:
#       junit:
#         - coverage/junit.xml

Code Style:
  stage: check
  needs: ['Dependencies']
  interruptible: true
  allow_failure: false
  script:
    - npm run prettier:check

NPM (dev):
  stage: deploy (NPM)
  needs: ['Static Files (kit)']
  dependencies:
    - 'Static Files (kit)'
  interruptible: false
  allow_failure: true
  variables:
    TAG: 'dev'
  except:
    - main
  when: manual
  script:
    - node ./node_modules/@bimeister/build-cli/executable.js npm-package npmrc-prepare --npmrc_path="./.npmrc"
      --auth_token="${NPM_AUTH_TOKEN}" --org_email="info@bimeister.com"
      --registry="https://git.bimeister.io/api/v4/projects/98/packages/npm/" --remove_scoped_registries="true"
    - cp ./.npmrc  --target-directory ./dist/lib/
    - node ./node_modules/@bimeister/build-cli/executable.js npm-package package-json-prepare
      --package_json_path="./dist/lib/package.json" --commit_hash="${GIT_COMMIT_HASH}-dev"
    - npm publish ./dist/lib/ --tag="${TAG}" --access="public"

NPM (stable):
  stage: deploy (NPM)
  # needs: ['Static Files', 'Test', 'Code Style', 'Lint', 'Spell Check']
  needs: ['Static Files (kit)', 'Code Style', 'Lint', 'Spell Check']
  dependencies:
    - 'Static Files (kit)'
  interruptible: false
  allow_failure: true
  variables:
    TAG: 'stable'
  only:
    - main
  when: always
  script:
    - node ./node_modules/@bimeister/build-cli/executable.js npm-package npmrc-prepare --npmrc_path="./.npmrc"
      --auth_token="${NPM_AUTH_TOKEN}" --org_email="info@bimeister.com"
      --registry="https://git.bimeister.io/api/v4/projects/98/packages/npm/" --remove_scoped_registries="true"
    - cp ./.npmrc  --target-directory ./dist/lib/
    - node ./node_modules/@bimeister/build-cli/executable.js npm-package package-json-prepare
      --package_json_path="./dist/lib/package.json" --commit_hash="${GIT_COMMIT_HASH}"
    - npm publish ./dist/lib/ --tag="${TAG}" --access="public"

pages:
  stage: deploy (demo)
  needs: ['Static Files (demo)']
  dependencies:
    - 'Static Files (demo)'
  interruptible: true
  allow_failure: false
  script:
    - mv dist/demo public
  only:
    - main
  when: always
  artifacts:
    when: always
    paths:
      - public

Stage 1:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-1'
    PORT: 8081
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"

Stage 1:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-2'
    PORT: 8082
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"

Stage 3:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-3'
    PORT: 8083
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"

Stage 4:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-4'
    PORT: 8084
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"

Stage 5:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-5'
    PORT: 8085
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"

Stage 6:
  tags:
    - common
  needs: []
  stage: deploy (demo)
  variables:
    CI: $CI
    CONTAINER: 'pupa-6'
    PORT: 8086
    BASE_HREF: '${CONTAINER}.bimeister.io'
  when: manual
  interruptible: true
  allow_failure: true
  before_script:
    - echo "$SSH_DEPLOY_KEY" > id_rsa && chmod 600 id_rsa
  script:
    - scripts/build.sh stage_deploy_service
    - ssh -i id_rsa -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ${TARGET_USER}@${TARGET_HOST}
      "docker rm --force ${CONTAINER} ; docker run --detach --publish ${PORT}:80 --name ${CONTAINER} ${DEPLOY_IMAGE}"
