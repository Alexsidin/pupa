@use 'sass:map';

@import 'themes/functions';
@import 'mixins';
@import 'functions';
@import 'variables';

:host {
  display: block;
  width: 100%;
}

.search-field {
  box-sizing: border-box;
  position: relative;
  width: 100%;

  @include flex-container(row, center, flex-start);

  &_collapsible {
    position: absolute;
    top: 0;
    transition: all variable(transition-duration_shorter) variable(transition-timing-function_common);

    &.to-left {
      right: 0;
    }

    &.to-right {
      left: 0;
    }
  }

  &_collapsed {
    width: 8rem;
  }

  &__input {
    z-index: 2;
    position: relative;
    overflow: hidden;
    cursor: pointer;
    outline: none;
    width: 100%;
    border-radius: 1px;
    box-sizing: border-box;
    border: 1px solid transparent;
    height: 8rem;
    padding: 2rem 10rem;
    color: map.get($input_light_styles, input, color);
    caret-color: map.get($input_light_styles, input, caret-color);
    background-color: map.get($input_light_styles, input, background-color);
    transition: all variable(transition-duration_shorter) variable(transition-timing-function_common);
    @include font-type-paragraph();
    @include font-size-mark(true);

    &_collapsed {
      padding: 2rem;
    }

    &:-webkit-autofill {
      border-color: map.get($input_light_styles, input, background-color);
      -webkit-text-fill-color: map.get($input_light_styles, input, color);
      box-shadow: none;
      -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, input, background-color) inset;
    }

    &::placeholder {
      color: map.get($input_light_styles, input, placeholder, color);
    }

    &:not(:focus):not([disabled]) {
      @include hover() {
        background-color: map.get($input_light_styles, hover, background-color);

        &:-webkit-autofill {
          box-shadow: none;
          -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, hover, background-color) inset;
          border-color: map.get($input_light_styles, hover, background-color);
        }
      }
    }

    &:active:not(:focus):not([disabled]) {
      border-color: transparent;
      background-color: map.get($input_light_styles, active, background-color);

      &:-webkit-autofill {
        border-color: map.get($input_light_styles, active, background-color);
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, active, background-color) inset;
      }
    }

    &:focus:not([disabled]) {
      cursor: text;
      border-color: map.get($input_light_styles, focus, border-color);
      background-color: map.get($input_light_styles, focus, background-color);

      &:-webkit-autofill {
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, focus, background-color) inset;
        border-color: map.get($input_light_styles, focus, border-color);
      }

      &::placeholder {
        color: map.get($input_light_styles, focus, placeholder, color);
      }

      ~ .search-field__reset {
        display: block;
      }
    }

    &[disabled] {
      border-color: transparent;
      cursor: not-allowed;
      color: map.get($input_light_styles, disabled, color);
      background-color: map.get($input_light_styles, disabled, background-color);

      &:-webkit-autofill {
        -webkit-text-fill-color: map.get($input_light_styles, disabled, color);
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_light_styles, disabled, background-color) inset;
        border-color: map.get($input_light_styles, disabled, background-color);
      }

      &::selection {
        background: transparent;
      }

      &::placeholder {
        color: map.get($input_light_styles, disabled, placeholder, color);
      }

      ~ .search-field__icon {
        color: map.get($input_light_styles, disabled, color);
      }
    }

    &_filled,
    &_collapsible {
      ~ .search-field__reset {
        display: block;
      }
    }

    @include host-selector-dark-theme() {
      color: map.get($input_dark_styles, input, color);
      caret-color: map.get($input_dark_styles, input, caret-color);
      background-color: map.get($input_dark_styles, input, background-color);

      &:-webkit-autofill {
        -webkit-text-fill-color: map.get($input_dark_styles, input, color);
        box-shadow: none;
        -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, input, background-color) inset;
        border-color: map.get($input_dark_styles, input, background-color);
      }

      &::placeholder {
        color: map.get($input_dark_styles, input, placeholder, color);
      }

      &:not(:focus):not([disabled]) {
        @include hover() {
          background-color: map.get($input_dark_styles, hover, background-color);
          &:-webkit-autofill {
            box-shadow: none;
            -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, hover, background-color) inset;
            border-color: map.get($input_dark_styles, hover, background-color);
          }
        }
      }

      &:active:not(:focus):not([disabled]) {
        color: map.get($input_dark_styles, active, color);
      }

      &:focus {
        background-color: map.get($input_dark_styles, focus, background-color);
        &::placeholder {
          color: map.get($input_dark_styles, focus, placeholder, color);
        }
        border-color: map.get($input_dark_styles, focus, border-color);

        &:-webkit-autofill {
          border-color: map.get($input_dark_styles, focus, border-color);
          box-shadow: none;
          -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, focus, background-color) inset;
        }
      }

      &[disabled] {
        color: map.get($input_dark_styles, disabled, color);
        background-color: map.get($input_dark_styles, disabled, background-color);

        &:-webkit-autofill {
          -webkit-text-fill-color: map.get($input_dark_styles, disabled, color);
          box-shadow: none;
          -webkit-box-shadow: 0 10rem 0 0 map.get($input_dark_styles, disabled, background-color) inset;
          border-color: map.get($input_dark_styles, disabled, background-color);
        }

        &::placeholder {
          color: map.get($input_dark_styles, disabled, placeholder, color);
        }
      }
    }
  }

  &__reset {
    position: absolute;
    z-index: 3;
    right: 2rem;
    display: none;
    color: map.get($input_light_styles, input, color);
    @include host-selector-dark-theme() {
      color: map.get($input_dark_styles, input, color);
    }
  }

  &__icon {
    position: absolute;
    z-index: 4;
    pointer-events: none;
    transition: all variable(transition-duration_shorter) variable(transition-timing-function_common);
    color: map.get($input_light_styles, input, color);
    padding: 2rem;
    transform: translateX(2rem);

    &_collapsed {
      transform: translateX(0);
      cursor: pointer;
      left: 0;
      pointer-events: all;
      transition: all variable(transition-duration_shorter) variable(transition-timing-function_common);
      caret-color: map.get($input_light_styles, input, caret-color);
      background-color: map.get($input_light_styles, input, background-color);
      @include flex-container(row, center, center);

      &:not(.search-field__icon_disabled) {
        @include hover() {
          background-color: map.get($input_light_styles, hover, background-color);
        }
      }

      @include host-selector-dark-theme() {
        caret-color: map.get($input_dark_styles, input, caret-color);
        background-color: map.get($input_dark_styles, input, background-color);

        &:not(.search-field__icon_disabled) {
          @include hover() {
            background-color: map.get($input_dark_styles, hover, background-color);
          }
        }
      }
    }

    &_disabled {
      border-color: transparent;
      cursor: not-allowed;
      color: map.get($input_light_styles, disabled, color);
      background-color: map.get($input_light_styles, disabled, background-color);
    }

    @include host-selector-dark-theme() {
      color: map.get($input_dark_styles, input, color);

      &_disabled {
        color: map.get($input_dark_styles, disabled, color);
        background-color: map.get($input_dark_styles, disabled, background-color);
      }
    }
  }
}
