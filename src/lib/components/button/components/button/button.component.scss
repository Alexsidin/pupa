@import 'themes/functions';
@import 'mixins';
@import 'functions';

:host {
  appearance: none;
}

.button {
  all: unset;
  appearance: none;
  box-sizing: border-box;
  @include regular();
  cursor: pointer;
  padding: 0;
  outline: none;
  @include transition(#{'background, border, box-shadow, padding'});
  @include inline-flex-container(row, center, space-evenly, nowrap);

  &_with-loader:not(:disabled) {
    .button__icon.button__icon_right {
      display: none;
    }
  }
}

.button__text {
  user-select: none;
  order: 0;
}

.button__icon {
  box-sizing: border-box;
  user-select: none;
  &_left {
    order: -1;
    margin: 0 rems(0.5) 0 0;
  }
  &_right {
    order: 1;
    margin: 0 0 0 rems(0.5);
  }
}

.button__loader {
  box-sizing: border-box;
  margin: 0 0 0 rems(0.5);
  &_disabled {
    width: 0 !important;
    margin: 0 !important;
    overflow: hidden;
  }
}

// size
.button_large {
  min-width: rems(7);
  height: rems(2.5);
  border-radius: variable(border-radius_controls-large);
  padding: rems(0.625) rems(1);
  .button__text {
    font-size: rems(1);
    @include medium();
    line-height: 1;
  }
  .button__icon {
    @include icon-size(rems(1));
  }
  .button__loader {
    @include icon-size(rems(1));
  }
}

.button_medium {
  min-width: rems(7);
  height: rems(2);
  border-radius: variable(border-radius_controls-medium);
  padding: rems(0.375) rems(0.5);
  .button__text {
    font-size: rems(1);
    @include medium();
    line-height: 1;
  }
  .button__icon {
    @include icon-size(rems(1));
  }
  .button__loader {
    @include icon-size(rems(1));
  }
}

.button_small {
  min-width: rems(4);
  height: rems(1.5);
  border-radius: variable(border-radius_controls-small);
  padding: rems(0.1875) rems(0.625);
  .button__text {
    font-size: variable(font-size_base-text);
    @include regular();
    line-height: 1.14;
  }
  .button__icon {
    @include icon-size(variable(font-size_base-text));
  }
  .button__loader {
    @include icon-size(variable(font-size_base-text));
  }
}

@mixin button-color($background-color, $color, $border-color: none) {
  @if $border-color == 'none' {
    border: 1px solid #{$background-color};
  } @else {
    border: 1px solid #{$border-color};
  }
  background: $background-color;
  .button__icon,
  .button__text,
  .button__loader {
    color: $color;
  }
}

// style + color
.button_solid.button_normal {
  @include button-color(color(main), color(white));
  &:focus,
  &:hover {
    @include button-color(color(active), color(white));
    box-shadow: variable(box-shadow_hover);
  }
}
.button_solid.button_normal-light {
  @include button-color(color(pale-blue), color(main));
  &:focus,
  &:hover {
    @include button-color(color(active), color(white));
    box-shadow: variable(box-shadow_hover);
  }
}
.button_solid.button_negative {
  @include button-color(color(error), color(white));
  &:focus,
  &:hover {
    box-shadow: variable(box-shadow_hover);
  }
}
.button_solid.button_positive {
  @include button-color(color(success), color(white));
  &:focus,
  &:hover {
    box-shadow: variable(box-shadow_hover);
  }
}
.button_solid.button_alert {
  @include button-color(color(alert), color(white));
  &:focus,
  &:hover {
    box-shadow: variable(box-shadow_hover);
  }
}

.button_outlined.button_normal {
  @include button-color(color(white), color(main), color(main));
  &:focus,
  &:hover {
    @include button-color(color(white), color(active), color(active));
  }
}
.button_outlined.button_normal-light {
  @include button-color(color(white), color(pale-blue), color(pale-blue));
  &:focus,
  &:hover {
    @include button-color(color(pale-blue), color(active));
    box-shadow: variable(box-shadow_hover);
  }
}
.button_outlined.button_negative {
  @include button-color(color(white), color(text), color(error));
  &:focus,
  &:hover {
    @include button-color(rgba(color(error-rgb), variable(opacity_hovered-button)), color(text), color(error));
  }
}
.button_outlined.button_positive {
  @include button-color(color(white), color(text), color(success));
  &:focus,
  &:hover {
    @include button-color(rgba(color(success-rgb), variable(opacity_hovered-button)), color(text), color(success));
  }
}
.button_outlined.button_alert {
  @include button-color(color(white), color(text), color(alert));
  &:focus,
  &:hover {
    @include button-color(rgba(color(alert-rgb), variable(opacity_hovered-button)), color(text), color(alert));
  }
}

.button_link {
  @include button-color(transparent, color(main));
  &:focus,
  &:hover {
    @include button-color(transparent, color(active));
  }
}

// style + disabled
.button_solid:disabled,
.button_solid:disabled:hover {
  @include button-color(color(grey-ivory), color(white));
  box-shadow: unset;
  cursor: not-allowed;
}

.button_outlined:disabled,
.button_outlined:disabled:hover {
  @include button-color(color(white), color(grey-ivory), color(grey-ivory));
  box-shadow: unset;
  cursor: not-allowed;
}
